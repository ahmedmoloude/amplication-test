/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAddressdsadsaArgs } from "./CreateAddressdsadsaArgs";
import { UpdateAddressdsadsaArgs } from "./UpdateAddressdsadsaArgs";
import { DeleteAddressdsadsaArgs } from "./DeleteAddressdsadsaArgs";
import { AddressdsadsaCountArgs } from "./AddressdsadsaCountArgs";
import { AddressdsadsaFindManyArgs } from "./AddressdsadsaFindManyArgs";
import { AddressdsadsaFindUniqueArgs } from "./AddressdsadsaFindUniqueArgs";
import { Addressdsadsa } from "./Addressdsadsa";
import { CustomerFindManyArgs } from "../../customer/base/CustomerFindManyArgs";
import { Customer } from "../../customer/base/Customer";
import { AddressdsadsaService } from "../addressdsadsa.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Addressdsadsa)
export class AddressdsadsaResolverBase {
  constructor(
    protected readonly service: AddressdsadsaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "read",
    possession: "any",
  })
  async _addressdsadsasMeta(
    @graphql.Args() args: AddressdsadsaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Addressdsadsa])
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "read",
    possession: "any",
  })
  async addressdsadsas(
    @graphql.Args() args: AddressdsadsaFindManyArgs
  ): Promise<Addressdsadsa[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Addressdsadsa, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "read",
    possession: "own",
  })
  async addressdsadsa(
    @graphql.Args() args: AddressdsadsaFindUniqueArgs
  ): Promise<Addressdsadsa | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Addressdsadsa)
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "create",
    possession: "any",
  })
  async createAddressdsadsa(
    @graphql.Args() args: CreateAddressdsadsaArgs
  ): Promise<Addressdsadsa> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Addressdsadsa)
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "update",
    possession: "any",
  })
  async updateAddressdsadsa(
    @graphql.Args() args: UpdateAddressdsadsaArgs
  ): Promise<Addressdsadsa | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Addressdsadsa)
  @nestAccessControl.UseRoles({
    resource: "Addressdsadsa",
    action: "delete",
    possession: "any",
  })
  async deleteAddressdsadsa(
    @graphql.Args() args: DeleteAddressdsadsaArgs
  ): Promise<Addressdsadsa | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Customer], { name: "customers" })
  @nestAccessControl.UseRoles({
    resource: "Customer",
    action: "read",
    possession: "any",
  })
  async resolveFieldCustomers(
    @graphql.Parent() parent: Addressdsadsa,
    @graphql.Args() args: CustomerFindManyArgs
  ): Promise<Customer[]> {
    const results = await this.service.findCustomers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
